{{- $globals := ternary .Values.global.stage (ternary .Values.global.prod .Values.global.dev (eq .Values.global.env_name "prod")) (eq .Values.global.env_name "stage") -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.global.app_name }}
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: {{ .Values.global.app_name }}
  template:
    metadata:
      labels:
        app: {{ .Values.global.app_name }}
        ksync: {{ .Values.global.app_name }}
    spec:
      containers:
        - name: nginx
          image: {{ .Values.werf.image.nginx }}
          ports:
            - name: http
              containerPort: 80
          volumeMounts:
            - name: nginx-config-volume-1
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: nginx-config-volume-2
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
            - name: nginx-mimetypes
              mountPath: /etc/nginx/mime.types
              subPath: mime.types
            - name: nginx-logs
              mountPath: /etc/nginx/logs.conf
              subPath: logs.conf
        - name: {{ .Values.global.app_name }}
          image: {{ .Values.werf.image.app }}
          env:
{{ include "apps-env-var-values" . | indent 12 }}
            - name: HOST
              value: "0"
            - name: PORT
              value: "3000"
          ports:
            - name: http
              containerPort: 3000
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          resources:
            requests:
              memory: "100Mi"
              cpu: "100m"
            limits:
              memory: "1Gi"
              cpu: "500m"
      volumes:
        - name: nginx-config-volume-1
          configMap:
            name: nginx-config-1
            items:
              - key: nginx.conf
                path: nginx.conf
        - name: {{ .Values.global.app_name }}-nginx-config-volume-2
          configMap:
            name: nginx-config-2
            items:
              - key: default
                path: default.conf
        - name: {{ .Values.global.app_name }}-nginx-mimetypes
          configMap:
            name: nginx-mimetypes
            items:
              - key: mime.types
                path: mime.types
        - name: {{ .Values.global.app_name }}-nginx-logs
          configMap:
            name: nginx-logs
            items:
              - key: logs.conf
                path: logs.conf
      imagePullSecrets:
        - name: docker-registry
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.global.app_name }}
spec:
  ports:
    - port: 80
      name: http
  selector:
    app: {{ .Values.global.app_name }}
---
